[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "odyn"
version = "0.1.0"
description = "Odyn â€“ Python adapter for Microsoft Dynamics 365 Business Central OData v4 API"
readme = "README.md"
authors = [{name = "kon-fin", email = "erpsupport@konspec.com"}]
requires-python = ">=3.12"
dependencies = [
    "fastexcel>=0.14.0",
    "loguru>=0.7.3",
    "polars>=1.31.0",
    "requests>=2.32.4",
    "xlsxwriter>=3.2.5",
]

[project.scripts]
odyn = "odyn:main"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

# ============================================================================
# Type Checker Configuration (ty)
# ============================================================================

[tool.ty.src]
include = ["src"]
exclude = [".venv"]

[tool.ty.rules]
unused-ignore-comment = "warn"
possibly-unresolved-reference = "error"
division-by-zero = "error"


# ============================================================================
# Ruff Configuration
# ============================================================================

[tool.ruff]
target-version = "py312"
line-length = 88
src = ["src"]
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".uv-cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "migrations",
    "venv",
]

[tool.ruff.lint]
select = [
    # Core linting
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes

    # Import and naming
    "I",      # isort
    "N",      # pep8-naming
    "TID",    # flake8-tidy-imports
    "ICN",    # flake8-import-conventions

    # Documentation
    "D",      # pydocstyle

    # Type annotations
    "ANN",    # flake8-annotations
    "FA",     # flake8-future-annotations
    "TCH",    # flake8-type-checking

    # Code quality and bugs
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "PIE",    # flake8-pie
    "PERF",   # Perflint
    "FURB",   # refurb
    "RUF",    # Ruff-specific rules

    # Security and safety
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except

    # Best practices
    "UP",     # pyupgrade
    "A",      # flake8-builtins
    "PTH",    # flake8-use-pathlib
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots

    # Code style
    "COM",    # flake8-commas
    "Q",      # flake8-quotes
    "ISC",    # flake8-implicit-str-concat

    # Error handling
    "EM",     # flake8-errmsg
    "TRY",    # tryceratops
    "RSE",    # flake8-raise
    "RET",    # flake8-return

    # Testing
    "PT",     # flake8-pytest-style

    # Cleanup and maintenance
    "ERA",    # eradicate
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ARG",    # flake8-unused-arguments

    # Format and structure
    "G",      # flake8-logging-format
    "LOG",    # flake8-logging
    "DTZ",    # flake8-datetimez
    "PGH",    # pygrep-hooks
    "PL",     # Pylint

    # Other rules
    "YTT",    # flake8-2020
    "FBT",    # flake8-boolean-trap
    "INP",    # flake8-no-pep420
    "INT",    # flake8-gettext
    "PD",     # pandas-vet
]

# Rules to ignore for practicality
ignore = [
    # Docstring flexibility
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)

    # Type annotation flexibility
    "ANN204",  # Missing return type annotation for special method

    # Formatter conflicts
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicitly concatenated string literals on one line (conflicts with formatter)

    # Practical exceptions
    "S101",    # Use of assert detected (common in tests)
    "PLR0913", # Too many arguments to function call (sometimes necessary)
    "PLR2004", # Magic value used in comparison (sometimes overly strict)
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link on the line following TODO
    "FIX002",  # Line contains TODO (allow TODOs)
]

# Rules that should be auto-fixed
unfixable = [
    "F841",   # Unused variables
    "ERA001", # Commented-out code
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.per-file-ignores]
# Test files
"tests/**/*.py" = [
    "S101",     # Allow assert in tests
    "PLR2004",  # Allow magic values in tests
    "PLC0415",  # Import must be top level
    "ANN",      # No type annotations required
    "D",        # No docstrings required
    "SLF001",   # Allow private member access
    "PT011",    # pytest.raises too broad
    "ARG001",   # Unused function arguments (fixtures)
    "BLE001",   # Blindly catching exceptions in tests
    "INP001",   # __init__ for tests folder
    "B018",     # Must assign data to a variable
    "S105",     # Hard coded token in test files
    "S106",     # Hard coded passwords in test files
    "F401",     # Unused imports
]

"examples/**/*.py" = [
    "S105",     # Hard coded token in test files
    "S106",     # Hard coded passwords in test files
    "T201",     # Print statements allowed in examples
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
split-on-trailing-comma = true
known-first-party = ["odyn"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true

[tool.ruff.lint.pylint]
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 60

# ============================================================================
# Commitizen Configuration
# ============================================================================

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "uv"
update_changelog_on_bump = true
major_version_zero = true


# ============================================================================
# Coverage Configuration
# ============================================================================

[tool.pytest.ini_options]
# Default options for pytest-cov
addopts = [
  "--cov=odyn",
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov-fail-under=90"
]
