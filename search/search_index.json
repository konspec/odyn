{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Odyn Documentation","text":"<p>A modern, typed, and robust Python client for the Microsoft Dynamics 365 Business Central OData V4 API</p> <p>Odyn provides a convenient and feature-rich interface for interacting with Microsoft Dynamics 365 Business Central, including automatic retry mechanisms, pagination handling, and pluggable authentication sessions.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Type Safety: Fully typed with comprehensive type annotations for better IDE support and runtime safety.</li> <li>Automatic Retry Logic: Built-in exponential backoff retry mechanism for handling transient network failures.</li> <li>Smart Pagination: Automatic handling of OData pagination with transparent multi-page data retrieval.</li> <li>Flexible Authentication: Pluggable <code>requests.Session</code> based authentication. Comes with <code>BearerAuthSession</code> and <code>BasicAuthSession</code> out of the box.</li> <li>Comprehensive Logging: Detailed logging with <code>loguru</code> integration for easy debugging and monitoring.</li> <li>Production Ready: Robust error handling, validation, and timeout management.</li> <li>Extensible Design: Easily extendable to support custom authentication strategies or other session-level features.</li> </ul>"},{"location":"#supported-python-versions","title":"Supported Python Versions","text":"<ul> <li>Python 3.12+</li> </ul>"},{"location":"#core-dependencies","title":"Core Dependencies","text":"<ul> <li>requests (\u22652.32.4)</li> <li>loguru (\u22650.7.3)</li> </ul>"},{"location":"#when-to-use-odyn","title":"When to Use Odyn","text":"<p>Use Odyn when you need to:</p> <ul> <li>Integrate with Microsoft Dynamics 365 Business Central via its OData V4 API.</li> <li>Handle complex API interactions with automatic retries and pagination.</li> <li>Build production applications that require robust error handling and logging.</li> <li>Maintain type safety throughout your API client code.</li> <li>Customize authentication strategies for different deployment scenarios.</li> </ul>"},{"location":"#microsoft-dynamics-365-business-central-odata-web-services","title":"Microsoft Dynamics 365 Business Central OData Web Services","text":"<p>Odyn is specifically designed to work with the Microsoft Dynamics 365 Business Central OData Web Services. This API provides programmatic access to Business Central data and operations through RESTful endpoints.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from odyn import Odyn, BearerAuthSession\n\n# Create an authenticated session with your access token\nsession = BearerAuthSession(token=\"your-access-token\")\n\n# Initialize the client with your production tenant URL\nclient = Odyn(\n    base_url=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant-id/production/\",\n    session=session,\n)\n\n# Fetch data with automatic pagination\ncustomers = client.get(\"customers\")\nprint(f\"Retrieved {len(customers)} customers\")\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Install Odyn using pip, uv, or poetry</li> <li>Getting Started - Quick setup and first API call</li> </ul>"},{"location":"#usage-guides","title":"Usage Guides","text":"<ul> <li>Odyn Client - Complete API reference for the main client</li> <li>Authentication Sessions - Session management and authentication</li> <li>Exception Handling - Understanding and handling errors</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Configuration - Timeouts, retries, and advanced settings</li> <li>Logging - Logging behavior and customization</li> </ul>"},{"location":"#reference","title":"Reference","text":"<ul> <li>FAQ - Frequently asked questions</li> <li>Troubleshooting - Common issues and solutions</li> <li>Contributing - How to contribute to Odyn</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms specified in the LICENSE file.</p>"},{"location":"contributing/","title":"Contributing to Odyn","text":"<p>This is a personal library for Microsoft Dynamics 365 Business Central OData V4 API integration. While primarily for personal use, contributions and feedback are welcome.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/konspec/odyn.git\ncd odyn\n</code></pre>"},{"location":"contributing/#2-set-up-development-environment","title":"2. Set Up Development Environment","text":"<p>We use uv for project management.</p> <pre><code># Create and activate virtual environment\npython -m venv .venv\n\n# On Windows:\n.venv\\Scripts\\activate\n# On macOS/Linux:\nsource .venv/bin/activate\n\n# Install dependencies\nuv pip install -e .[dev]\n</code></pre>"},{"location":"contributing/#3-set-up-pre-commit-hooks","title":"3. Set Up Pre-commit Hooks","text":"<pre><code>pre-commit install\npre-commit install --hook-type=commit-msg\npre-commit install --hook-type=pre-push\n</code></pre>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#running-checks-and-tests","title":"Running Checks and Tests","text":"<pre><code># Run all checks and tests\ntask all\n\n# Run specific tools\ntask ruff ty    # Linting and type checking\ntask test       # Run tests\n</code></pre>"},{"location":"contributing/#code-standards","title":"Code Standards","text":"<ul> <li>Code Style: We use Ruff for formatting and linting</li> <li>Type Hints: All public APIs must include type hints</li> <li>Docstrings: Google-style docstrings for public functions and classes</li> <li>Commits: Follow Conventional Commits specification</li> </ul>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you find bugs or have suggestions, please open an issue with: - Clear description of the problem - Steps to reproduce - Expected vs actual behavior - Environment details (Python version, OS, etc.)</p>"},{"location":"contributing/#personal-use-notes","title":"Personal Use Notes","text":"<p>This library is primarily developed for personal use cases with Microsoft Dynamics 365 Business Central. The focus is on: - Type safety and robust error handling - Simple, intuitive API design - Production-ready reliability - Comprehensive logging and debugging support</p> <p>Thank you for your interest in Odyn!</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This FAQ provides answers to common questions about Odyn. If you don't find your answer here, please check the other documentation pages or open an issue.</p>"},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-is-odyn","title":"What is Odyn?","text":"<p>Odyn is a modern Python client for the Microsoft Dynamics 365 Business Central OData V4 API. It is designed to be robust and easy to use, with features like automatic retries, pagination handling, and type-safe interfaces.</p>"},{"location":"faq/#what-are-the-requirements","title":"What are the requirements?","text":"<ul> <li>Python: 3.12 or higher</li> <li>Core Dependencies:<ul> <li><code>requests</code> (&gt;=2.32.4)</li> <li><code>loguru</code> (&gt;=0.7.3)</li> </ul> </li> </ul>"},{"location":"faq/#authentication","title":"Authentication","text":""},{"location":"faq/#how-do-i-authenticate","title":"How do I authenticate?","text":"<p>Authentication is handled via session objects. Odyn provides two ready-to-use sessions: <code>BearerAuthSession</code> (recommended for OAuth) and <code>BasicAuthSession</code>.</p> <pre><code>from odyn import BearerAuthSession\n\n# Use a bearer token for authentication\nsession = BearerAuthSession(\"your-access-token\")\n\n# For more details, see the Authentication Sessions guide.\n</code></pre> <p>See: Authentication Sessions</p>"},{"location":"faq/#making-requests","title":"Making Requests","text":""},{"location":"faq/#how-does-pagination-work","title":"How does pagination work?","text":"<p>It's automatic. The <code>client.get()</code> method handles OData's <code>@odata.nextLink</code> pagination for you, returning a complete list of all records from all pages.</p>"},{"location":"faq/#how-do-i-select-specific-fields-or-filter-results","title":"How do I select specific fields or filter results?","text":"<p>Use OData's standard query parameters (<code>$select</code>, <code>$filter</code>, <code>$top</code>, etc.) in the <code>params</code> argument of the <code>get</code> method.</p> <pre><code># Select the 'id' and 'name' fields, and filter by name\ncustomers = client.get(\n    \"customers\",\n    params={\"$select\": \"id,displayName\", \"$filter\": \"contains(displayName, 'Adatum')\"}\n)\n</code></pre>"},{"location":"faq/#is-there-asyncio-support","title":"Is there <code>asyncio</code> support?","text":"<p>No. Odyn is a synchronous library built on <code>requests</code>. It does not support <code>asyncio</code> out of the box.</p>"},{"location":"faq/#configuration","title":"Configuration","text":""},{"location":"faq/#how-do-i-change-the-request-timeout","title":"How do I change the request timeout?","text":"<p>Pass a <code>(connect, read)</code> tuple to the <code>timeout</code> parameter of the <code>Odyn</code> client. Both values are in seconds.</p> <pre><code># Set a 5-second connect timeout and a 30-second read timeout\nclient = Odyn(..., timeout=(5, 30))\n</code></pre> <p>See: Advanced Configuration</p>"},{"location":"faq/#how-do-i-configure-the-retry-logic","title":"How do I configure the retry logic?","text":"<p>You can customize the number of <code>retries</code>, the <code>backoff_factor</code>, and the <code>status_forcelist</code> when creating a session object.</p> <pre><code>session = BearerAuthSession(\n    token=\"your-token\",\n    retries=10,\n    backoff_factor=1.5\n)\n</code></pre> <p>See: Advanced Configuration</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#how-do-i-debug-failed-requests","title":"How do I debug failed requests?","text":"<p>Provide a configured <code>loguru</code> logger to the <code>Odyn</code> client to see detailed logs, including request/response information.</p> <p>See: Logging Guide</p>"},{"location":"faq/#what-does-invalidurlerror-mean","title":"What does <code>InvalidURLError</code> mean?","text":"<p>The <code>base_url</code> provided to the client was invalid. Ensure it's a non-empty string that starts with <code>http://</code> or <code>https://</code> and includes a domain name.</p>"},{"location":"faq/#what-does-invalidsessionerror-mean","title":"What does <code>InvalidSessionError</code> mean?","text":"<p>The <code>session</code> object was not a valid <code>requests.Session</code> instance. Make sure you are using one of Odyn's session classes or a valid custom session.</p>"},{"location":"faq/#what-does-invalidtimeouterror-mean","title":"What does <code>InvalidTimeoutError</code> mean?","text":"<p>The <code>timeout</code> value was not a tuple of two positive numbers. It must be in the format <code>(connect_timeout, read_timeout)</code>.</p>"},{"location":"faq/#contributing","title":"Contributing","text":""},{"location":"faq/#how-can-i-contribute-to-odyn","title":"How can I contribute to Odyn?","text":"<p>We welcome contributions! Please read our Contributing Guide to get started with the development setup and pull request process.</p>"},{"location":"faq/#more-help","title":"More Help","text":"<ul> <li>Troubleshooting Guide</li> <li>Exception Reference</li> <li>Microsoft OData V4 Docs</li> </ul>"},{"location":"getting-started/","title":"Getting Started with Odyn","text":"<p>This guide provides a complete walkthrough for setting up Odyn and making your first API calls to Microsoft Dynamics 365 Business Central. We will cover the core concepts, provide a complete code example, and show you how to work with the results.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you start, please ensure you have completed the following: 1.  Installed Odyn: Follow the Installation Guide to install Odyn in a virtual environment. 2.  Acquired Business Central Credentials: You must have access to a Business Central tenant and the necessary credentials. This includes:     *   Your tenant's specific API base URL.     *   An authentication method, such as a Bearer Token (access token) or a username and Web Service Access Key for Basic Authentication.</p>"},{"location":"getting-started/#core-concepts-the-client-and-the-session","title":"Core Concepts: The Client and The Session","text":"<p>Odyn is designed with a clear separation of concerns, which makes it both flexible and easy to use. The two most important components you will interact with are:</p> <ol> <li> <p>The <code>Odyn</code> Client: This is the main entry point for all API operations. It handles request building, automatic pagination, logging, and response parsing. You create one instance of the client for a specific Business Central API endpoint.</p> </li> <li> <p>The <code>Session</code> Object: This object manages authentication and retry logic. It is passed to the <code>Odyn</code> client during initialization. Odyn comes with pre-built sessions:</p> <ul> <li><code>BearerAuthSession</code>: For modern token-based authentication (recommended).</li> <li><code>BasicAuthSession</code>: For legacy username/password authentication.</li> <li><code>OdynSession</code>: A base session you can extend for custom authentication strategies.</li> </ul> </li> </ol> <p>This design means you can configure your authentication and retry policies once and reuse that session across multiple client instances if needed.</p>"},{"location":"getting-started/#a-complete-example","title":"A Complete Example","text":"<p>Let's walk through a complete, runnable script that demonstrates how to use Odyn. This example fetches a list of customers from Business Central, filtering for specific records and selecting only the fields we need.</p> <p>Create a new Python file, for example <code>run_odyn.py</code>:</p> <pre><code># run_odyn.py\nimport os\nimport requests\nfrom odyn import (\n    Odyn,\n    BearerAuthSession,\n    InvalidURLError,\n    InvalidSessionError,\n)\n\ndef get_customers_by_city(city_name: str):\n    \"\"\"\n    Connects to Business Central and retrieves customers from a specific city.\n    \"\"\"\n    print(f\"Attempting to fetch customers from city: {city_name}...\")\n\n    try:\n        # Step 1: Get credentials and configuration\n        # For this example, we load them from environment variables for security.\n        # In a real application, you might use a secure vault or config file.\n        access_token = os.getenv(\"BC_ACCESS_TOKEN\")\n        base_url = os.getenv(\"BC_BASE_URL\")\n\n        if not access_token or not base_url:\n            print(\"Error: BC_ACCESS_TOKEN and BC_BASE_URL environment variables must be set.\")\n            return\n\n        # Step 2: Create an Authenticated Session\n        # The session handles adding the \"Authorization: Bearer &lt;token&gt;\" header\n        # to every request and also manages automatic retries on transient errors.\n        session = BearerAuthSession(token=access_token)\n\n        # Step 3: Initialize the Odyn Client\n        # The client needs the base URL for the API and the session object.\n        client = Odyn(base_url=base_url, session=session)\n\n        # Step 4: Make the API Call with OData Parameters\n        # We use the params argument to pass OData query options.\n        # This is more robust and readable than manually encoding them in the URL.\n        customers = client.get(\n            \"customers\",\n            params={\n                \"$filter\": f\"city eq '{city_name}'\",\n                \"$select\": \"number,displayName,phoneNumber\",\n                \"$orderby\": \"displayName\",\n            },\n        )\n\n        # Step 5: Process the Results\n        if not customers:\n            print(f\"No customers found in {city_name}.\")\n            return\n\n        print(f\"Successfully retrieved {len(customers)} customers from {city_name}:\")\n        for customer in customers:\n            print(\n                f\"  - Name: {customer.get('displayName', 'N/A')}, \"\n                f\"Number: {customer.get('number', 'N/A')}, \"\n                f\"Phone: {customer.get('phoneNumber', 'N/A')}\"\n            )\n\n    except InvalidURLError as e:\n        print(f\"Configuration Error: The provided base URL is invalid. {e}\")\n    except InvalidSessionError as e:\n        print(f\"Configuration Error: The session object is invalid. {e}\")\n    except requests.exceptions.HTTPError as e:\n        # This catches errors like 401 Unauthorized or 404 Not Found.\n        status = e.response.status_code\n        print(f\"HTTP Error: Received status {status}. Check your token and URL.\")\n        # For a 401, your access token may be expired or invalid.\n        # For a 404, the base_url or endpoint might be incorrect.\n    except requests.exceptions.RequestException as e:\n        # This catches network-level errors (e.g., connection timeout).\n        print(f\"Network Error: Could not connect to the server. {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    # Replace \"New York\" with a city you expect to have customers in.\n    get_customers_by_city(\"New York\")\n\n</code></pre>"},{"location":"getting-started/#how-to-run-the-example","title":"How to Run the Example","text":"<ol> <li> <p>Set Environment Variables: Before running, you must provide your credentials.     ```bash     # On macOS/Linux     export BC_ACCESS_TOKEN=\"your-super-secret-token-here\"     export BC_BASE_URL=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant-id/production/\"</p> </li> </ol>"},{"location":"getting-started/#on-windows-command-prompt","title":"On Windows (Command Prompt)","text":"<p>set BC_ACCESS_TOKEN=\"your-super-secret-token-here\" set BC_BASE_URL=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant-id/production/\" <code>2.  **Execute the Script**:</code>bash python run_odyn.py ```</p>"},{"location":"getting-started/#working-with-odata-query-parameters","title":"Working with OData Query Parameters","text":"<p>A key feature of Business Central's API is its support for the OData protocol, which allows you to refine your requests. Odyn makes this easy via the <code>params</code> dictionary in <code>get()</code> requests.</p> <p>Here are the most common OData options:</p> <ul> <li><code>$filter</code>: Restricts the data returned. Analogous to a <code>WHERE</code> clause in SQL.<ul> <li><code>params={\"$filter\": \"blocked eq 'false'\"}</code></li> <li><code>params={\"$filter\": \"contains(displayName, 'Chairs')\"}</code></li> </ul> </li> <li><code>$select</code>: Specifies which fields to return, reducing payload size.<ul> <li><code>params={\"$select\": \"id,number,displayName\"}</code></li> </ul> </li> <li><code>$top</code>: Limits the number of records returned.<ul> <li><code>params={\"$top\": 10}</code></li> </ul> </li> <li><code>$orderby</code>: Sorts the results.<ul> <li><code>params={\"$orderby\": \"displayName desc\"}</code></li> </ul> </li> <li><code>$expand</code>: Includes related entities in the response.<ul> <li><code>params={\"$expand\": \"paymentTerm\"}</code></li> </ul> </li> </ul> <p>You can combine these to build powerful, efficient queries, as shown in the main example.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have successfully made your first API call, you are ready to explore more of Odyn's capabilities.</p> <ul> <li>Authentication: Dive deeper into Authentication Sessions to learn about custom retry logic.</li> <li>Configuration: Learn how to configure Timeouts and other settings.</li> <li>Error Handling: Get a complete overview of the Exception classes.</li> <li>API Reference: See the full Odyn Client API Reference for details on all methods.</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":"<p>This document is the definitive guide to installing Odyn. Whether you are using Odyn in your application or contributing to its development, please follow these instructions carefully.</p> <p>Odyn is a modern, typed, and robust Python client for the Microsoft Dynamics 365 Business Central OData V4 API.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure your development environment meets these requirements.</p>"},{"location":"installation/#python-version","title":"Python Version","text":"<ul> <li>Python 3.12 or newer is required.</li> </ul> <p>Odyn leverages modern Python features for performance, correctness, and type safety.</p> <p>To check your Python version, run:</p> <pre><code># This command should output \"Python 3.12.x\" or higher\npython3 --version\n\n# On Windows, you might use the Python Launcher:\npy --version\n</code></pre> <p>If you have multiple Python versions, ensure you are using <code>python3</code> or <code>py -3.12</code> consistently.</p>"},{"location":"installation/#virtual-environment","title":"Virtual Environment","text":"<ul> <li>A virtual environment is essential for all Python projects.</li> </ul> <p>A virtual environment isolates your project's dependencies from your system's global Python installation. This prevents version conflicts and ensures your application has a consistent, reproducible set of packages. Do not skip this step.</p>"},{"location":"installation/#part-1-standard-installation-for-users","title":"Part 1: Standard Installation (For Users)","text":"<p>Follow these steps to use Odyn in your own project.</p>"},{"location":"installation/#step-1-create-and-activate-a-virtual-environment","title":"Step 1: Create and Activate a Virtual Environment","text":"<p>Choose one of the following methods. We recommend <code>uv</code> for its speed.</p>"},{"location":"installation/#recommended-using-uv","title":"Recommended: Using <code>uv</code>","text":"<p>uv is an extremely fast, next-generation Python package manager.</p> <pre><code># Install uv if you don't have it\npip install uv\n\n# Create and activate a virtual environment named .venv\nuv venv\nsource .venv/bin/activate  # On macOS/Linux\n# .venv\\Scripts\\activate   # On Windows\n</code></pre>"},{"location":"installation/#standard-using-venv","title":"Standard: Using <code>venv</code>","text":"<p><code>venv</code> is Python's built-in tool for creating virtual environments.</p> <pre><code># Create a virtual environment named .venv\npython3 -m venv .venv\n\n# Activate the environment\nsource .venv/bin/activate  # On macOS/Linux\n# .venv\\Scripts\\activate   # On Windows\n</code></pre> <p>After activation, your command prompt will typically be prefixed with <code>(.venv)</code>, indicating the virtual environment is active.</p>"},{"location":"installation/#step-2-install-odyn","title":"Step 2: Install Odyn","text":"<p>With your virtual environment active, install Odyn.</p>"},{"location":"installation/#recommended-using-uv_1","title":"Recommended: Using <code>uv</code>","text":"<pre><code># Install the latest version of Odyn\nuv pip install odyn\n\n# To install a specific version for reproducible builds:\nuv pip install odyn==0.1.0\n</code></pre>"},{"location":"installation/#standard-using-pip","title":"Standard: Using <code>pip</code>","text":"<pre><code># Install the latest version of Odyn\npip install odyn\n\n# To install a specific version for reproducible builds:\npip install odyn==0.1.0\n</code></pre>"},{"location":"installation/#step-3-verify-the-installation","title":"Step 3: Verify the Installation","text":"<p>Create a Python file (e.g., <code>test_odyn.py</code>) and run it to confirm Odyn is installed correctly.</p> <pre><code># test_odyn.py\ntry:\n    from odyn import Odyn, BearerAuthSession\n    print(\"\u2705 Odyn was imported successfully.\")\nexcept ImportError as e:\n    print(f\"\u274c Failed to import Odyn: {e}\")\n</code></pre> <p>Running <code>python test_odyn.py</code> should print a success message.</p>"},{"location":"installation/#part-2-development-setup-for-contributors","title":"Part 2: Development Setup (For Contributors)","text":"<p>Follow these steps if you wish to contribute to Odyn, run tests, or modify the source code.</p>"},{"location":"installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<p>First, get a local copy of the source code.</p> <pre><code>git clone https://github.com/konspec/odyn.git\ncd odyn\n</code></pre>"},{"location":"installation/#step-2-create-environment-and-install-dependencies","title":"Step 2: Create Environment and Install Dependencies","text":"<p>This process installs the library in \"editable\" mode along with all development tools.</p>"},{"location":"installation/#recommended-using-uv_2","title":"Recommended: Using <code>uv</code>","text":"<pre><code># Create and activate a virtual environment\nuv venv\nsource .venv/bin/activate # On macOS/Linux, use .venv\\Scripts\\activate on Windows\n\n# Install in editable mode with development dependencies\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"installation/#understanding-the-command-uv-pip-install-e-dev","title":"Understanding the Command (<code>uv pip install -e \".[dev]\"</code>)","text":"<ul> <li><code>-e</code> or <code>--editable</code>: This flag is crucial. It installs the package in a way that your changes to the source code in <code>src/odyn/</code> are immediately effective without needing to reinstall the package.</li> <li><code>\".[dev]\"</code>: This tells the installer to:<ul> <li>Look for the project in the current directory (<code>.</code>).</li> <li>Install the extra dependency group named <code>[dev]</code>, defined in <code>pyproject.toml</code>. This group includes linters, formatters, and testing tools like <code>ruff</code> and <code>pytest</code>.</li> <li>Note: The quotes are important on some systems (like macOS with Zsh) to prevent the shell from interpreting the square brackets.</li> </ul> </li> </ul>"},{"location":"installation/#step-3-run-quality-and-test-suites","title":"Step 3: Run Quality and Test Suites","text":"<p>After installation, verify that the development environment is set up correctly by running the project's quality checks and test suite.</p> <pre><code># Run the linter to check for code style and quality\nruff check .\n\n# Run the automated test suite\npytest\n</code></pre> <p>Both commands should complete successfully on a fresh clone.</p>"},{"location":"installation/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"installation/#issue-command-not-found-python3-uv-git","title":"Issue: Command Not Found (<code>python3</code>, <code>uv</code>, <code>git</code>)","text":"<ul> <li>Error: <code>command not found: python3</code> or <code>command not found: uv</code>.</li> <li>Solution: The command is either not installed or not available in your system's <code>PATH</code>.<ul> <li>For Python, download it from python.org.</li> <li>For <code>uv</code>, install it via <code>pip install uv</code>.</li> <li>For <code>git</code>, install it from git-scm.com.</li> </ul> </li> </ul>"},{"location":"installation/#issue-permission-denied","title":"Issue: Permission Denied","text":"<ul> <li>Error: <code>OSError: [Errno 13] Permission denied</code>.</li> <li>Solution: This error occurs when you try to install packages to a system-level directory without sufficient permissions. Always use a virtual environment to avoid this issue. It's the correct and safest way to manage project dependencies.</li> </ul>"},{"location":"installation/#issue-zsh-no-matches-found-dev","title":"Issue: <code>zsh: no matches found: .[dev]</code>","text":"<ul> <li>Error: Occurs on macOS or Linux systems using Zsh.</li> <li>Solution: Your shell is trying to interpret the square brackets <code>[]</code> as a special pattern. To prevent this, wrap the argument in quotes:   ```bash   # Incorrect   pip install -e .[dev]</li> </ul> <p># Correct   pip install -e \".[dev]\"   ```</p>"},{"location":"installation/#issue-network-error","title":"Issue: Network Error","text":"<ul> <li>Error: <code>Could not find a version that satisfies the requirement odyn</code>.</li> <li>Solution: This usually indicates a problem connecting to the Python Package Index (PyPI). Check your internet connection, VPN, or corporate firewall settings that might be blocking access to <code>pypi.org</code>.</li> </ul>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Once Odyn is installed, you can:</p> <ol> <li>Get started with your first API call</li> <li>Learn about authentication sessions</li> <li>Explore the complete API reference</li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide will help you diagnose and resolve common errors when using the Odyn client. For a list of all custom exceptions, see the Exception Reference.</p> <p>A good first step for any issue is to enable detailed logging, which can provide crucial context about the problem.</p>"},{"location":"troubleshooting/#1-configuration-errors","title":"1. Configuration Errors","text":"<p>These errors are raised by Odyn's internal validation before a network request is made. They indicate a problem with how the client was initialized.</p>"},{"location":"troubleshooting/#invalidurlerror","title":"InvalidURLError","text":"<ul> <li>Symptom: <code>InvalidURLError: URL must have a valid scheme (http or https)...</code> or <code>URL cannot be empty</code>.</li> <li>Cause: The <code>base_url</code> is missing, malformed, or does not start with <code>http://</code> or <code>https://</code>.</li> <li>Solution: Provide a valid, non-empty base URL.</li> </ul> <pre><code># Correct\nclient = Odyn(base_url=\"https://api.example.com/api/v2.0/\", ...)\n</code></pre>"},{"location":"troubleshooting/#invalidsessionerror","title":"InvalidSessionError","text":"<ul> <li>Symptom: <code>InvalidSessionError: session must be a Session, got &lt;class 'str'&gt;</code>.</li> <li>Cause: The object passed to the <code>session</code> parameter is not an instance of <code>requests.Session</code>.</li> <li>Solution: Pass a valid session object, such as <code>BearerAuthSession</code> or <code>BasicAuthSession</code>.</li> </ul> <pre><code>from odyn import BearerAuthSession\n\n# Correct\nsession = BearerAuthSession(\"your-token\")\nclient = Odyn(..., session=session)\n</code></pre>"},{"location":"troubleshooting/#invalidtimeouterror","title":"InvalidTimeoutError","text":"<ul> <li>Symptom: <code>InvalidTimeoutError: Timeout must be a tuple...</code> or <code>...must be greater than 0</code>.</li> <li>Cause: The <code>timeout</code> parameter was not a tuple of two positive numbers.</li> <li>Solution: Ensure the timeout is in the format <code>(connect_timeout, read_timeout)</code>.</li> </ul> <pre><code># Correct\nclient = Odyn(..., timeout=(10, 60))\n</code></pre>"},{"location":"troubleshooting/#invalidloggererror","title":"InvalidLoggerError","text":"<ul> <li>Symptom: <code>InvalidLoggerError: logger must be a Logger, got ...</code></li> <li>Cause: The object passed to the <code>logger</code> parameter is not a <code>loguru.Logger</code> instance.</li> <li>Solution: Provide a valid <code>loguru</code> logger.</li> </ul>"},{"location":"troubleshooting/#2-http-network-errors","title":"2. HTTP &amp; Network Errors","text":"<p>These errors occur during the network request and are typically raised by the underlying <code>requests</code> library.</p>"},{"location":"troubleshooting/#401-unauthorized","title":"401 Unauthorized","text":"<ul> <li>Symptom: <code>requests.exceptions.HTTPError: 401 Client Error: Unauthorized for url: ...</code></li> <li>Cause: The access token is invalid, expired, or lacks the required permissions.</li> <li>Solution:<ol> <li>Ensure your access token is correct and not expired.</li> <li>Verify the associated application has the correct API permissions in Business Central.</li> </ol> </li> </ul>"},{"location":"troubleshooting/#429-too-many-requests","title":"429 Too Many Requests","text":"<ul> <li>Symptom: <code>requests.exceptions.HTTPError: 429 Client Error: Too Many Requests for url: ...</code></li> <li>Cause: The Business Central API is rate-limiting your client due to too many requests in a short period.</li> <li>Solution: Adjust the retry settings on your session to use a higher <code>backoff_factor</code> or more <code>retries</code>.</li> </ul> <pre><code># Increase backoff to wait longer between retries\nsession = BearerAuthSession(..., backoff_factor=3.0, retries=10)\n</code></pre> <p>See: Advanced Configuration</p>"},{"location":"troubleshooting/#request-timeouts","title":"Request Timeouts","text":"<ul> <li>Symptom: <code>requests.exceptions.ConnectTimeout</code> or <code>requests.exceptions.ReadTimeout</code>.</li> <li>Cause: The request took longer than the configured <code>timeout</code> values. This is distinct from <code>InvalidTimeoutError</code>.</li> <li>Solution: Increase the <code>connect</code> or <code>read</code> timeout values in the client configuration.</li> </ul> <pre><code># Increase read timeout to 5 minutes for a long-running query\nclient = Odyn(..., timeout=(15, 300))\n</code></pre>"},{"location":"troubleshooting/#connection-ssl-errors","title":"Connection &amp; SSL Errors","text":"<ul> <li>Symptom: <code>requests.exceptions.ConnectionError</code> or <code>requests.exceptions.SSLError</code>.</li> <li>Cause: A network problem (e.g., DNS, firewall, proxy) or an SSL certificate issue is preventing a connection.</li> <li>Solution: Check your network environment and ensure your system's root certificates are up to date.</li> </ul>"},{"location":"troubleshooting/#3-api-response-errors","title":"3. API Response Errors","text":"<p>These errors indicate that the client received a response from the API, but the data was not in the expected format.</p>"},{"location":"troubleshooting/#json-decode-error","title":"JSON Decode Error","text":"<ul> <li>Symptom: <code>ValueError: Failed to decode JSON from response</code>.</li> <li>Cause: The API returned a non-JSON response, which can happen if there is a server-side error that produces an HTML error page.</li> <li>Solution: Enable logging to inspect the raw response body. The endpoint you are calling may be incorrect or the server may be down.</li> </ul>"},{"location":"troubleshooting/#invalid-odata-response","title":"Invalid OData Response","text":"<ul> <li>Symptom: <code>TypeError: OData response format is invalid: 'value' key is missing...</code></li> <li>Cause: The API response, while valid JSON, does not follow the expected OData structure (i.e., it's missing the <code>value</code> key for a collection).</li> <li>Solution:<ol> <li>Confirm your endpoint URL is correct.</li> <li>Ensure you are querying a collection endpoint (e.g., <code>/customers</code>) and not a single entity endpoint (e.g., <code>/customers(some_id)</code>).</li> </ol> </li> </ul>"},{"location":"troubleshooting/#general-debugging-strategy","title":"General Debugging Strategy","text":"<p>If you're not sure what the problem is, follow these steps:</p>"},{"location":"troubleshooting/#1-enable-logging","title":"1. Enable Logging","text":"<p>The most effective way to debug is to enable detailed logging. This will show you the exact requests being made, the responses received, and any validation warnings.</p> <pre><code>import sys\nfrom loguru import logger\n\n# Send detailed logs to a file and INFO-level logs to the console\nlogger.add(\"debug.log\", level=\"DEBUG\")\nlogger.add(sys.stderr, level=\"INFO\")\n\n# Pass the logger to the client\nclient = Odyn(..., logger=logger)\n</code></pre> <p>See: Logging Guide</p>"},{"location":"troubleshooting/#2-inspect-the-exception","title":"2. Inspect the Exception","text":"<p>Examine the full traceback to understand where the error originated. An error from <code>odyn._exceptions</code> is a client-side validation issue, while an error from <code>requests.exceptions</code> is a network or HTTP issue.</p>"},{"location":"troubleshooting/#3-check-the-api-documentation","title":"3. Check the API Documentation","text":"<p>Consult the Business Central API Docs to ensure your endpoints and parameters are correct.</p>"},{"location":"troubleshooting/#still-stuck","title":"Still Stuck?","text":"<p>If you're still having trouble, please open an issue and provide as much detail as possible, including logs and code to reproduce the problem.</p>"},{"location":"advanced/configuration/","title":"Advanced Configuration","text":"<p>The <code>odyn</code> client is designed to be robust and flexible. This guide covers advanced configuration options for timeouts, retry strategies, and common setup patterns to help you tailor the client to your specific needs.</p>"},{"location":"advanced/configuration/#timeout-configuration","title":"Timeout Configuration","text":"<p>Odyn allows you to set separate timeouts for connecting to the server and for reading the response. This is useful for handling network conditions and long-running queries independently.</p> <p>The timeout is a tuple of two numbers (integers or floats): <code>(connect_timeout, read_timeout)</code>.</p> <ul> <li><code>connect_timeout</code>: The time (in seconds) to wait for a connection to the server to be established.</li> <li><code>read_timeout</code>: The time (in seconds) to wait for the server to send a response after the connection is established.</li> </ul> <p>By default, the timeout is <code>(60, 60)</code>.</p>"},{"location":"advanced/configuration/#timeout-examples","title":"Timeout Examples","text":"<pre><code>from odyn import Odyn, BearerAuthSession\n\n# Default timeout (60s connect, 60s read)\nclient = Odyn(\n    base_url=\"https://api.example.com/\",\n    session=BearerAuthSession(\"your-token\")\n)\n\n# Aggressive timeout for fast networks (5s connect, 30s read)\nfast_client = Odyn(\n    base_url=\"https://api.example.com/\",\n    session=BearerAuthSession(\"your-token\"),\n    timeout=(5, 30)\n)\n\n# Conservative timeout for large data exports (15s connect, 5min read)\nbulk_client = Odyn(\n    base_url=\"https://api.example.com/\",\n    session=BearerAuthSession(\"your-token\"),\n    timeout=(15, 300)\n)\n</code></pre>"},{"location":"advanced/configuration/#retry-and-backoff-strategy","title":"Retry and Backoff Strategy","text":"<p>The <code>OdynSession</code> and its subclasses (<code>BearerAuthSession</code>, <code>BasicAuthSession</code>) automatically retry failed requests using an exponential backoff strategy. This helps the client recover from transient network errors or temporary server issues.</p>"},{"location":"advanced/configuration/#configuring-retries","title":"Configuring Retries","text":"<p>You can customize the retry behavior when creating a session instance.</p> <pre><code>from odyn import Odyn, BearerAuthSession\n\n# Customize retry attempts, backoff factor, and status codes to retry on\nsession = BearerAuthSession(\n    token=\"your-token\",\n    retries=10,\n    backoff_factor=1.5,\n    status_forcelist=[429, 500, 502, 503, 504]\n)\n\nclient = Odyn(base_url=\"https://api.example.com/\", session=session)\n</code></pre> <ul> <li><code>retries</code>: The total number of retry attempts. Default: <code>5</code>.</li> <li><code>backoff_factor</code>: A multiplier for calculating the delay between retries. The delay is <code>backoff_factor * (2 ** (retry_number - 1))</code>. Default: <code>2.0</code>.</li> <li><code>status_forcelist</code>: A list of HTTP status codes that will trigger a retry. Default: <code>[500, 502, 503, 504, 429]</code>.</li> </ul>"},{"location":"advanced/configuration/#backoff-timing-examples","title":"Backoff Timing Examples","text":"<p>The table below shows the delay (in seconds) for each retry attempt based on the <code>backoff_factor</code>.</p> Backoff Factor 1st Retry 2nd Retry 3rd Retry 4th Retry 5th Retry 0.5 0.5s 1.0s 2.0s 4.0s 8.0s 1.0 1.0s 2.0s 4.0s 8.0s 16.0s 2.0 (Default) 2.0s 4.0s 8.0s 16.0s 32.0s"},{"location":"advanced/configuration/#input-validation","title":"Input Validation","text":"<p>To prevent common errors, <code>odyn</code> performs strict validation on its initial parameters. If validation fails, a descriptive error is raised immediately.</p> <ul> <li>Logger: Must be a <code>loguru.Logger</code> instance. This is validated first so it can be used in subsequent validation steps.</li> <li>Base URL:<ul> <li>Must be a non-empty string.</li> <li>Must have a valid scheme (<code>http</code> or <code>https</code>).</li> <li>Must contain a network location (domain).</li> <li>Is automatically sanitized to ensure it ends with a <code>/</code>.</li> </ul> </li> <li>Session: Must be an instance of <code>requests.Session</code>.</li> <li>Timeout:<ul> <li>Must be a tuple.</li> <li>Must contain exactly two elements.</li> <li>Both elements must be positive numbers (int or float).</li> </ul> </li> </ul>"},{"location":"advanced/configuration/#common-configuration-patterns","title":"Common Configuration Patterns","text":"<p>Here are some common patterns for managing <code>odyn</code> client configuration in your applications.</p>"},{"location":"advanced/configuration/#environment-based-configuration","title":"Environment-Based Configuration","text":"<p>A common practice is to configure the client using environment variables, which is ideal for containerized or cloud-native applications.</p> <pre><code>import os\nfrom odyn import Odyn, BearerAuthSession\n\ndef create_client_from_env():\n    \"\"\"Creates a client using settings from environment variables.\"\"\"\n    session = BearerAuthSession(\n        token=os.environ[\"BC_TOKEN\"],\n        retries=int(os.getenv(\"BC_RETRIES\", 5)),\n        backoff_factor=float(os.getenv(\"BC_BACKOFF\", 2.0))\n    )\n\n    client = Odyn(\n        base_url=os.environ[\"BC_BASE_URL\"],\n        session=session,\n        timeout=(\n            int(os.getenv(\"BC_CONNECT_TIMEOUT\", 60)),\n            int(os.getenv(\"BC_READ_TIMEOUT\", 60))\n        )\n    )\n    return client\n</code></pre>"},{"location":"advanced/configuration/#configuration-via-factory-pattern","title":"Configuration via Factory Pattern","text":"<p>A factory can help create consistently configured clients for different environments (e.g., development vs. production).</p> <pre><code>from odyn import Odyn, BearerAuthSession\n\nclass OdynClientFactory:\n    \"\"\"A factory for creating pre-configured Odyn clients.\"\"\"\n\n    @staticmethod\n    def create(base_url: str, token: str, environment: str = \"production\") -&gt; Odyn:\n        if environment == \"development\":\n            session = BearerAuthSession(token=token, retries=3, backoff_factor=1.0)\n            timeout = (10, 60) # Fast timeouts for dev\n        else: # production\n            session = BearerAuthSession(token=token, retries=10, backoff_factor=2.0)\n            timeout = (30, 180) # Conservative timeouts for prod\n\n        return Odyn(base_url=base_url, session=session, timeout=timeout)\n\n# Usage\n# dev_client = OdynClientFactory.create(base_url, token, environment=\"development\")\n# prod_client = OdynClientFactory.create(base_url, token, environment=\"production\")\n</code></pre>"},{"location":"advanced/configuration/#monitoring-retry-attempts","title":"Monitoring Retry Attempts","text":"<p>Because retries are handled by the underlying <code>urllib3</code> library, they are not logged through <code>odyn</code>'s logger by default. To see these logs, you must intercept the standard <code>logging</code> library messages and redirect them to <code>loguru</code>.</p> <p>This is the recommended way to monitor retry behavior and diagnose transient issues.</p> <pre><code>import logging\nfrom loguru import logger\n\n# Configure loguru to intercept logs from the standard logging library\nclass InterceptHandler(logging.Handler):\n    def emit(self, record: logging.LogRecord) -&gt; None:\n        try:\n            level = logger.level(record.levelname).name\n        except ValueError:\n            level = record.levelno\n\n        frame, depth = logging.currentframe(), 2\n        while frame and frame.f_code.co_filename == logging.__file__:\n            frame = frame.f_back\n            depth += 1\n\n        logger.opt(depth=depth, exception=record.exc_info).log(\n            level, record.getMessage()\n        )\n\n# Apply the interceptor\nlogging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\n\n# Now, when a request is retried, you will see a WARNING log from urllib3.\n# Example: WARNING: Retrying (Retry(total=2, connect=None, read=None, ...))\n</code></pre> <p>For more details on logging, see the Logging documentation.</p>"},{"location":"advanced/configuration/#related-documentation","title":"Related Documentation","text":"<ul> <li>Odyn Client API</li> <li>Authentication Sessions</li> <li>Logging Guide</li> <li>Exception Handling</li> </ul>"},{"location":"advanced/logging/","title":"Logging in Odyn","text":"<p>Odyn uses the powerful loguru library for its internal logging. This provides users with flexible, structured, and easy-to-configure logging right out of the box.</p>"},{"location":"advanced/logging/#default-logging","title":"Default Logging","text":"<p>By default, the <code>Odyn</code> client will use a standard <code>loguru</code> logger instance without any specific configuration. This means logs will be printed to <code>sys.stderr</code> at the <code>DEBUG</code> level.</p> <pre><code>from odyn import Odyn, BearerAuthSession\n\n# This client will use the default loguru logger.\nclient = Odyn(\n    base_url=\"https://api.example.com/\",\n    session=BearerAuthSession(\"your-token\")\n)\n</code></pre>"},{"location":"advanced/logging/#providing-a-custom-logger","title":"Providing a Custom Logger","text":"<p>You can easily integrate Odyn with your application's existing <code>loguru</code> setup by passing your own logger instance. This is the recommended approach for production applications.</p> <pre><code>from loguru import logger\nfrom odyn import Odyn, BearerAuthSession\n\n# Configure your application's logger\nlogger.add(\"my_app.log\", level=\"INFO\", rotation=\"10 MB\")\n\n# Bind context and pass the logger to the client\nservice_logger = logger.bind(component=\"odyn-client\")\n\nclient = Odyn(\n    base_url=\"https://api.example.com/\",\n    session=BearerAuthSession(\"your-token\"),\n    logger=service_logger\n)\n</code></pre>"},{"location":"advanced/logging/#what-gets-logged","title":"What Gets Logged","text":"<p>The <code>Odyn</code> client logs various events during its lifecycle. The logs are structured, meaning extra data is often attached to the log record for better context.</p>"},{"location":"advanced/logging/#log-levels","title":"Log Levels","text":"<p>Here\u2019s a summary of what is logged at each level by the <code>Odyn</code> client:</p> <ul> <li><code>DEBUG</code>:<ul> <li>Client initialization steps.</li> <li>Validation success for URL, session, and timeout.</li> <li>Request URL construction.</li> <li>Details of outgoing requests (method, URL, params).</li> <li>Details of incoming responses (status code, URL).</li> <li>Pagination progress (pages fetched, item counts).</li> </ul> </li> <li><code>INFO</code>:<ul> <li>Final confirmation of successful client initialization.</li> <li>Completion of a full pagination cycle for an endpoint.</li> </ul> </li> <li><code>ERROR</code>:<ul> <li>Validation failures (<code>InvalidURLError</code>, <code>InvalidSessionError</code>, etc.).</li> <li>HTTP errors (4xx, 5xx), network errors, or JSON decoding failures. These logs include the full exception traceback.</li> </ul> </li> </ul>"},{"location":"advanced/logging/#example-log-output","title":"Example Log Output","text":"<p>Here is what you might see in your logs when making a simple <code>get</code> call:</p> <pre><code>DEBUG: Initializing Odyn client...\nDEBUG: Using provided custom logger.\nDEBUG: Base URL validation successful url='https://api.example.com/'\nDEBUG: Session validation successful.\nDEBUG: Timeout validation successful timeout=(60, 60)\nINFO: Odyn client initialized successfully. base_url='https://api.example.com/' timeout=(60, 60)\nDEBUG: Initiating GET request with pagination endpoint='customers' params=None\nDEBUG: Built request URL final_url='https://api.example.com/customers'\nDEBUG: Sending request method='GET' url='https://api.example.com/customers' params=None headers=None\nDEBUG: Request completed status_code=200 url='https://api.example.com/customers'\nDEBUG: Fetched 50 items from page 1. Total items so far: 50 count=50 page_num=1 total=50\nDEBUG: No more pages found for endpoint 'customers'. endpoint='customers'\nINFO: Finished fetching all pages for endpoint 'customers'. Total items: 50 endpoint='customers' total=50\n</code></pre>"},{"location":"advanced/logging/#capturing-retry-attempts","title":"Capturing Retry Attempts","text":"<p>The <code>OdynSession</code> automatically retries failed requests (e.g., on HTTP <code>502</code>, <code>503</code>, <code>504</code>, <code>429</code>). These retries are handled by the underlying <code>urllib3</code> library, which logs to the standard <code>logging</code> module, not <code>loguru</code>, by default.</p> <p>To see these retry attempts, you must configure <code>loguru</code> to intercept messages from the standard <code>logging</code> library. This is straightforward to set up.</p>"},{"location":"advanced/logging/#how-to-intercept-standard-logging","title":"How to Intercept Standard Logging","text":"<p>Add this <code>InterceptHandler</code> to your application's setup to redirect <code>logging</code> messages to <code>loguru</code>.</p> <pre><code>import logging\nfrom loguru import logger\nfrom odyn import Odyn, OdynSession\n\n# 1. Define the InterceptHandler\nclass InterceptHandler(logging.Handler):\n    def emit(self, record: logging.LogRecord) -&gt; None:\n        # Get corresponding Loguru level if it exists\n        try:\n            level = logger.level(record.levelname).name\n        except ValueError:\n            level = record.levelno\n\n        # Find caller from where originated the logged message\n        frame, depth = logging.currentframe(), 2\n        while frame and frame.f_code.co_filename == logging.__file__:\n            frame = frame.f_back\n            depth += 1\n\n        logger.opt(depth=depth, exception=record.exc_info).log(\n            level, record.getMessage()\n        )\n\n# 2. Configure logging to use the handler\nlogging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)\n\n# 3. Now, your Odyn client will show retry attempts\n# Note: Set the session retries to a low number for easy testing\nsession = OdynSession(retries=1)\nclient = Odyn(\n    base_url=\"https://api.example.com/\",\n    session=session,\n    logger=logger\n)\n</code></pre> <p>With this configuration, you will now see <code>WARNING</code> level logs from <code>urllib3</code> when a retry occurs.</p>"},{"location":"advanced/logging/#advanced-configuration-best-practices","title":"Advanced Configuration &amp; Best Practices","text":""},{"location":"advanced/logging/#structured-logging-json","title":"Structured Logging (JSON)","text":"<p>For production systems, structured JSON logs are highly recommended. They are machine-readable and integrate well with log analysis platforms.</p> <pre><code>from loguru import logger\n\nlogger.configure(\n    handlers=[\n        {\n            \"sink\": \"logs/odyn.json\",\n            \"format\": \"{message}\", # The message itself contains key-value pairs\n            \"serialize\": True,    # Convert to JSON\n            \"level\": \"INFO\",\n            \"rotation\": \"1 day\",\n            \"retention\": \"30 days\",\n        }\n    ]\n)\n\n# Use a bound logger to add consistent context to all logs\nclient_logger = logger.bind(\n    client_id=\"bc-client-001\",\n    tenant=\"production\"\n)\n\n# client = Odyn(..., logger=client_logger)\n</code></pre>"},{"location":"advanced/logging/#filtering-logs","title":"Filtering Logs","text":"<p>You can add filters to send different logs to different places. For example, you could send <code>ERROR</code> logs to a separate file.</p> <pre><code># Send ERROR logs to a separate file\nlogger.add(\n    \"logs/errors.log\",\n    level=\"ERROR\",\n    format=\"{time} {level} {extra} {message}\"\n)\n\n# Send performance-related logs to another file\nlogger.add(\n    \"logs/performance.log\",\n    filter=lambda record: \"performance\" in record[\"extra\"]\n)\n</code></pre>"},{"location":"advanced/logging/#use-enqueuetrue-for-performance","title":"Use <code>enqueue=True</code> for Performance","text":"<p>In high-throughput applications, logging can become a bottleneck. Setting <code>enqueue=True</code> makes logging calls non-blocking by moving the work to a separate process.</p> <pre><code>logger.add(\n    \"app.log\",\n    enqueue=True,  # Make logging asynchronous\n    level=\"INFO\"\n)\n</code></pre>"},{"location":"advanced/logging/#related-documentation","title":"Related Documentation","text":"<ul> <li>Odyn Client API - See the <code>logger</code> parameter.</li> <li>Configuration - General configuration patterns.</li> <li>Exception Handling - How errors are handled.</li> <li>Troubleshooting - Using logs for debugging.</li> </ul>"},{"location":"usage/exceptions/","title":"Guide to Exception Handling","text":"<p>Effective error handling is critical for building robust applications. This guide provides a comprehensive overview of the exceptions that Odyn can raise and the best practices for handling them.</p>"},{"location":"usage/exceptions/#two-categories-of-exceptions","title":"Two Categories of Exceptions","text":"<p>It is helpful to think of errors in two main categories:</p> <ol> <li> <p>Configuration Errors (<code>OdynError</code> and its subclasses)     These exceptions occur when you try to initialize an <code>Odyn</code> client or <code>Session</code> with invalid parameters. They are predictable and indicate a problem in your code that should be fixed during development. All of these inherit from the base <code>OdynError</code>.</p> </li> <li> <p>Runtime &amp; Network Errors (<code>requests.exceptions</code>)     These exceptions occur during a live API call. They are raised by the underlying <code>requests</code> library and indicate issues like network failures, timeouts, or HTTP error responses from the server (e.g., <code>401 Unauthorized</code>). These are the errors you need to handle gracefully in your production code.</p> </li> </ol>"},{"location":"usage/exceptions/#configuration-errors-the-odynerror-hierarchy","title":"Configuration Errors: The <code>OdynError</code> Hierarchy","text":"<p>All custom exceptions raised by Odyn inherit from a single base class, <code>OdynError</code>. This allows you to catch any specific configuration error, or all of them at once by catching the base class.</p> <pre><code>OdynError\n\u251c\u2500\u2500 InvalidURLError\n\u251c\u2500\u2500 InvalidSessionError\n\u251c\u2500\u2500 InvalidTimeoutError\n\u251c\u2500\u2500 InvalidLoggerError\n\u251c\u2500\u2500 InvalidRetryError\n\u251c\u2500\u2500 InvalidBackoffFactorError\n\u2514\u2500\u2500 InvalidStatusForcelistError\n</code></pre>"},{"location":"usage/exceptions/#invalidurlerror","title":"<code>InvalidURLError</code>","text":"<p>Raised when initializing an <code>Odyn</code> client with a malformed <code>base_url</code>.</p> <ul> <li>Common Causes: The URL string is empty, does not start with <code>http://</code> or <code>https://</code>, or is otherwise invalid.</li> <li>Example Trigger:     <code>python     import requests     from odyn import Odyn, InvalidURLError     try:         # This will fail because the scheme is missing         client = Odyn(base_url=\"api.example.com\", session=requests.Session())     except InvalidURLError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#invalidsessionerror","title":"<code>InvalidSessionError</code>","text":"<p>Raised when initializing an <code>Odyn</code> client with an object that is not an instance of <code>requests.Session</code>.</p> <ul> <li>Common Causes: Passing <code>None</code> or a non-session object (like a string or dict) to the <code>session</code> parameter.</li> <li>Example Trigger:     <code>python     from odyn import Odyn, InvalidSessionError     try:         # This will fail because a string is not a session object         client = Odyn(base_url=\"https://api.example.com\", session=\"not-a-session\")     except InvalidSessionError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#invalidtimeouterror","title":"<code>InvalidTimeoutError</code>","text":"<p>Raised when initializing an <code>Odyn</code> client with a malformed <code>timeout</code>.</p> <ul> <li>Common Causes: Providing a single number instead of a tuple, a tuple with the wrong number of elements, or a tuple containing non-positive values.</li> <li>Example Trigger:     <code>python     import requests     from odyn import Odyn, InvalidTimeoutError     try:         # This will fail because the timeout must be a tuple of two positive numbers         client = Odyn(base_url=\"https://api.example.com/\", session=requests.Session(), timeout=(10, -30))     except InvalidTimeoutError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#invalidloggererror","title":"<code>InvalidLoggerError</code>","text":"<p>Raised when initializing an <code>Odyn</code> client with an object that is not a <code>loguru.Logger</code>.</p> <ul> <li>Common Causes: Passing a logger from Python's standard <code>logging</code> library or any other non-loguru object.</li> <li>Example Trigger:     <code>python     import logging     import requests     from odyn import Odyn, InvalidLoggerError     try:         # This will fail because it's not a loguru logger         std_logger = logging.getLogger(\"test\")         client = Odyn(base_url=\"https://api.example.com/\", session=requests.Session(), logger=std_logger)     except InvalidLoggerError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#invalidretryerror","title":"<code>InvalidRetryError</code>","text":"<p>Raised when initializing an <code>OdynSession</code> (or its subclasses) with an invalid <code>retries</code> value.</p> <ul> <li>Common Causes: Providing a zero, negative, or non-integer value for the retry count.</li> <li>Example Trigger:     <code>python     from odyn import BearerAuthSession, InvalidRetryError     try:         # This will fail because retries must be a positive integer         session = BearerAuthSession(token=\"some-token\", retries=0)     except InvalidRetryError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#invalidbackofffactorerror","title":"<code>InvalidBackoffFactorError</code>","text":"<p>Raised when initializing an <code>OdynSession</code> with an invalid <code>backoff_factor</code>.</p> <ul> <li>Common Causes: Providing a zero or negative number for the backoff factor.</li> <li>Example Trigger:     <code>python     from odyn import BearerAuthSession, InvalidBackoffFactorError     try:         # This will fail because the backoff factor must be positive         session = BearerAuthSession(token=\"some-token\", backoff_factor=-1.0)     except InvalidBackoffFactorError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#invalidstatusforcelisterror","title":"<code>InvalidStatusForcelistError</code>","text":"<p>Raised when initializing an <code>OdynSession</code> with a <code>status_forcelist</code> that is not a list of integers.</p> <ul> <li>Common Causes: Providing a string or a list containing non-integer values.</li> <li>Example Trigger:     <code>python     from odyn import BearerAuthSession, InvalidStatusForcelistError     try:         # This will fail because the list contains a string         session = BearerAuthSession(token=\"some-token\", status_forcelist=[500, \"429\"])     except InvalidStatusForcelistError as e:         print(f\"Caught expected error: {e}\")</code></li> </ul>"},{"location":"usage/exceptions/#runtime-network-errors","title":"Runtime &amp; Network Errors","text":"<p>These errors occur during the <code>client.get()</code> call and must be handled in your code.</p>"},{"location":"usage/exceptions/#requestsexceptionshttperror","title":"<code>requests.exceptions.HTTPError</code>","text":"<ul> <li>When it's raised: When the Business Central API returns an HTTP error code (4xx or 5xx) that is not in the session's <code>status_forcelist</code> (and therefore not retried).</li> <li>Common Causes:<ul> <li><code>401 Unauthorized</code>: Your token is invalid, expired, or lacks permissions.</li> <li><code>404 Not Found</code>: The <code>base_url</code> or <code>endpoint</code> is incorrect.</li> <li><code>400 Bad Request</code>: Your OData query (e.g., in <code>$filter</code>) is malformed.</li> </ul> </li> <li>Handling: You can inspect the <code>response</code> attribute on the exception to get the status code and the error message from the API.</li> </ul>"},{"location":"usage/exceptions/#requestsexceptionsrequestexception","title":"<code>requests.exceptions.RequestException</code>","text":"<ul> <li>When it's raised: For fundamental networking issues.</li> <li>Common Causes: DNS failures, connection refused, or timeouts (both connect and read).</li> <li>Handling: This is a base class for many <code>requests</code> exceptions. Catching it is a good way to handle most network-level problems.</li> </ul>"},{"location":"usage/exceptions/#best-practice-error-handling-strategy","title":"Best Practice: Error Handling Strategy","text":"<p>Here is a robust <code>try...except</code> block that demonstrates how to handle these exceptions in a structured way. The key is to catch more specific exceptions before more general ones.</p> <pre><code>import requests\nfrom odyn import Odyn, BearerAuthSession, OdynError\n\n# Assume client is configured correctly for this example.\n# In a real app, these would come from a secure config or environment variables.\nsession = BearerAuthSession(token=\"your-token\")\nclient = Odyn(\n    base_url=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant/production/\",\n    session=session\n)\n\ntry:\n    # This is the operation that can fail at runtime\n    customers = client.get(\n        \"customers\",\n        params={\"$filter\": \"city eq 'New York'\"}\n    )\n    print(f\"Successfully retrieved {len(customers)} customers.\")\n\nexcept requests.exceptions.HTTPError as http_err:\n    # Handle specific HTTP status codes from the API\n    status_code = http_err.response.status_code\n    response_text = http_err.response.text\n    print(f\"HTTP Error: {status_code}. The API responded with: {response_text}\")\n    if status_code == 401:\n        print(\"Authentication failed. Please check your access token.\")\n    elif status_code == 404:\n        print(\"The requested resource was not found. Please check your URL and endpoint.\")\n\nexcept requests.exceptions.RequestException as req_err:\n    # Handle network-level errors (timeouts, connection issues)\n    print(f\"Network Error: Could not complete the request. {req_err}\")\n\nexcept (TypeError, ValueError) as data_err:\n    # Handle cases where the API returns unexpected or malformed JSON\n    print(f\"Data Error: The API response was not in the expected format. {data_err}\")\n\nexcept OdynError as config_err:\n    # This is for catching configuration errors during development.\n    # In production, this block might be less critical if config is static.\n    print(f\"Configuration Error: The Odyn client or session is misconfigured. {config_err}\")\n\nexcept Exception as e:\n    # A general fallback for any other unexpected errors\n    print(f\"An unexpected error occurred: {e}\")\n\n</code></pre>"},{"location":"usage/odyn/","title":"Odyn Client API Reference","text":"<p>This document provides a detailed API reference for the <code>odyn.Odyn</code> client, which is the primary interface for interacting with the Microsoft Dynamics 365 Business Central API.</p>"},{"location":"usage/odyn/#odyn-class","title":"<code>Odyn</code> Class","text":"<p>The <code>Odyn</code> client orchestrates API requests, manages endpoint URLs, and handles the automatic pagination of results. It relies on a Session object for authentication and retry logic.</p>"},{"location":"usage/odyn/#initialization","title":"Initialization","text":"<p>An <code>Odyn</code> client is initialized with the following constructor:</p> <pre><code>class Odyn:\n    def __init__(\n        self,\n        base_url: str,\n        session: requests.Session,\n        logger: loguru.Logger | None = None,\n        timeout: tuple[int, int] = (60, 60),\n    ) -&gt; None:\n</code></pre>"},{"location":"usage/odyn/#parameters","title":"Parameters","text":""},{"location":"usage/odyn/#base_url","title":"<code>base_url</code>","text":"<ul> <li>Type: <code>str</code></li> <li>Description: The full base URL of your Business Central OData V4 API endpoint. This URL must be well-formed and include the schema (<code>https://</code>). The client will sanitize the URL to ensure it ends with a <code>/</code>.</li> <li>Validation: The URL must be a valid string, start with <code>http</code> or <code>https</code> and contain a network location (domain).</li> <li>Raises: <code>InvalidURLError</code> if the validation fails.</li> </ul>"},{"location":"usage/odyn/#session","title":"<code>session</code>","text":"<ul> <li>Type: <code>requests.Session</code></li> <li>Description: An instance of a <code>requests.Session</code> (or a subclass like <code>OdynSession</code>) that will be used to perform all HTTP requests. This object is responsible for handling authentication (e.g., adding <code>Authorization</code> headers) and retry logic.</li> <li>See Also: Authentication and Session Management for details on creating and configuring sessions.</li> <li>Validation: Must be a valid <code>requests.Session</code> instance.</li> <li>Raises: <code>InvalidSessionError</code> if the object is not a <code>requests.Session</code>.</li> </ul>"},{"location":"usage/odyn/#timeout","title":"<code>timeout</code>","text":"<ul> <li>Type: <code>tuple[int, int]</code></li> <li>Default: <code>(60, 60)</code></li> <li>Description: A tuple specifying the <code>(connect_timeout, read_timeout)</code> in seconds for all requests made by the client.<ul> <li><code>connect_timeout</code>: The time to wait for a connection to be established.</li> <li><code>read_timeout</code>: The time to wait for the server to send a response after the connection is established.</li> </ul> </li> <li>Validation: Must be a tuple containing two positive <code>int</code> or <code>float</code> values.</li> <li>Raises: <code>InvalidTimeoutError</code> if the validation fails.</li> </ul>"},{"location":"usage/odyn/#logger","title":"<code>logger</code>","text":"<ul> <li>Type: <code>loguru.Logger | None</code></li> <li>Default: A default, pre-configured <code>loguru</code> logger instance.</li> <li>Description: A <code>loguru</code> logger instance for structured, context-rich logging. If you provide your own, the client will use it for all its logging output. If <code>None</code>, Odyn's default logger is used.</li> <li>Validation: Must be a valid <code>loguru.Logger</code> instance.</li> <li>Raises: <code>InvalidLoggerError</code> if a non-logger object is provided.</li> </ul>"},{"location":"usage/odyn/#initialization-example","title":"Initialization Example","text":"<pre><code>from odyn import Odyn, BearerAuthSession\nfrom loguru import logger\n\n# A session to handle authentication and retries\nsession = BearerAuthSession(\n    token=\"your-secret-token\",\n    retries=3\n)\n\n# A custom logger to capture context\ncustom_logger = logger.bind(service=\"BusinessCentralClient\")\n\n# Initialize the client with advanced configuration\nclient = Odyn(\n    base_url=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant-id/production/\",\n    session=session,\n    timeout=(10, 45),  # 10s connect, 45s read\n    logger=custom_logger\n)\n</code></pre>"},{"location":"usage/odyn/#public-attributes","title":"Public Attributes","text":"<p>Once initialized, you can inspect the following public attributes on a client instance:</p> <ul> <li><code>base_url</code> (<code>str</code>): The sanitized base URL used by the client.</li> <li><code>session</code> (<code>requests.Session</code>): The session object used for requests.</li> <li><code>timeout</code> (<code>tuple[int, int]</code>): The timeout configuration.</li> <li><code>logger</code> (<code>loguru.Logger</code>): The logger instance.</li> </ul>"},{"location":"usage/odyn/#methods","title":"Methods","text":""},{"location":"usage/odyn/#get","title":"<code>get()</code>","text":"<p>This is the primary method for retrieving data from Business Central. It sends a <code>GET</code> request and automatically handles OData's server-side pagination.</p> <pre><code>def get(\n    self,\n    endpoint: str,\n    params: dict[str, Any] | None = None,\n    headers: dict[str, str] | None = None,\n) -&gt; list[dict[str, Any]]:\n</code></pre>"},{"location":"usage/odyn/#parameters_1","title":"Parameters","text":"<ul> <li><code>endpoint</code> (<code>str</code>): The API endpoint path to query (e.g., <code>\"customers\"</code>, <code>\"salesInvoices\"</code>). This is appended to the <code>base_url</code>.</li> <li><code>params</code> (<code>dict | None</code>): A dictionary of OData query parameters (e.g., <code>\"$filter\"</code>, <code>\"$select\"</code>). These are automatically URL-encoded.</li> <li><code>headers</code> (<code>dict | None</code>): Any additional HTTP headers to include in the request, which will be merged with the headers from the session object.</li> </ul>"},{"location":"usage/odyn/#returns","title":"Returns","text":"<ul> <li><code>list[dict[str, Any]]</code>: A list containing all records retrieved from the API. If the API response spans multiple pages, this method will fetch all pages and concatenate the results into a single list before returning.</li> </ul>"},{"location":"usage/odyn/#how-pagination-works","title":"How Pagination Works","text":"<p>The <code>get</code> method inspects the API response for an <code>@odata.nextLink</code> key. If this key is present, it indicates more data is available. The client automatically follows this link to fetch the next page of results and continues doing so until all pages have been retrieved. This entire process is transparent to the caller.</p>"},{"location":"usage/odyn/#raises","title":"Raises","text":"<ul> <li><code>requests.exceptions.HTTPError</code>: For any HTTP 4xx (client) or 5xx (server) error responses that are not handled by the session's retry mechanism.</li> <li><code>requests.exceptions.RequestException</code>: For fundamental network errors (e.g., connection timeout, DNS failure).</li> <li><code>ValueError</code>: If the API returns a response that is not valid JSON.</li> <li><code>TypeError</code>: If the API returns a valid JSON response that is not in the expected OData format (e.g., it is missing the <code>value</code> key, or the value is not a list).</li> </ul>"},{"location":"usage/odyn/#get-examples","title":"<code>get()</code> Examples","text":"<p>1. Simple GET Request This fetches all records from the <code>items</code> endpoint.</p> <pre><code># Fetches all items across all pages\nall_items = client.get(\"items\")\nprint(f\"Retrieved {len(all_items)} items.\")\n</code></pre> <p>2. GET Request with OData Parameters This fetches the top 10 vendors, filtered by a specific location code, and selects only three fields to reduce payload size.</p> <pre><code>filtered_vendors = client.get(\n    \"vendors\",\n    params={\n        \"$top\": 10,\n        \"$filter\": \"locationCode eq 'EAST'\",\n        \"$select\": \"number,displayName,blocked\"\n    }\n)\n</code></pre> <p>3. GET Request with Custom Headers You can provide additional headers if a specific API endpoint requires them.</p> <pre><code># The odata.metadata parameter can control the verbosity of the response\nresponse = client.get(\n    \"customers\",\n    headers={\"Accept\": \"application/json;odata.metadata=minimal\"}\n)\n</code></pre>"},{"location":"usage/odyn/#internal-methods","title":"Internal Methods","text":""},{"location":"usage/odyn/#_requesturl-paramsnone-headersnone-methodget","title":"<code>_request(url, params=None, headers=None, method=\"GET\")</code>","text":"<p>Internal method that sends HTTP requests and handles responses.</p>"},{"location":"usage/odyn/#parameters_2","title":"Parameters","text":"<ul> <li><code>url</code> (<code>str</code>) - The full URL for the request.</li> <li><code>params</code> (<code>dict[str, Any] | None</code>, optional) - Query parameters.</li> <li><code>headers</code> (<code>dict[str, str] | None</code>, optional) - Request headers.</li> <li><code>method</code> (<code>str</code>, optional) - HTTP method. Defaults to \"GET\".</li> </ul>"},{"location":"usage/odyn/#returns_1","title":"Returns","text":"<ul> <li><code>dict[str, Any]</code> - The JSON response from the API.</li> </ul>"},{"location":"usage/odyn/#raises_1","title":"Raises","text":"<ul> <li><code>requests.exceptions.HTTPError</code> - For HTTP 4xx or 5xx status codes.</li> <li><code>requests.exceptions.RequestException</code> - For network-level errors.</li> <li><code>ValueError</code> - If the response is not valid JSON.</li> </ul>"},{"location":"usage/odyn/#_build_urlendpoint-paramsnone","title":"<code>_build_url(endpoint, params=None)</code>","text":"<p>Builds the full URL for an API request using robust URL joining.</p>"},{"location":"usage/odyn/#parameters_3","title":"Parameters","text":"<ul> <li><code>endpoint</code> (<code>str</code>) - The API endpoint path.</li> <li><code>params</code> (<code>dict[str, Any] | None</code>, optional) - Query parameters to append to the URL.</li> </ul>"},{"location":"usage/odyn/#returns_2","title":"Returns","text":"<ul> <li><code>str</code> - The fully constructed URL string.</li> </ul>"},{"location":"usage/odyn/#example","title":"Example","text":"<pre><code># Internal usage - builds URLs like:\n# https://api.example.com/customers?$top=10&amp;$filter=contains(name,'Adventure')\nurl = client._build_url(\"customers\", {\"$top\": 10, \"$filter\": \"contains(name,'Adventure')\"})\n</code></pre>"},{"location":"usage/odyn/#validation-methods","title":"Validation Methods","text":""},{"location":"usage/odyn/#_validate_urlurl","title":"<code>_validate_url(url)</code>","text":"<p>Validates and sanitizes the base URL.</p>"},{"location":"usage/odyn/#parameters_4","title":"Parameters","text":"<ul> <li><code>url</code> (<code>str</code>) - The base URL string to validate.</li> </ul>"},{"location":"usage/odyn/#returns_3","title":"Returns","text":"<ul> <li><code>str</code> - The sanitized URL, guaranteed to end with a \"/\".</li> </ul>"},{"location":"usage/odyn/#raises_2","title":"Raises","text":"<ul> <li><code>InvalidURLError</code> - If the URL is empty, has an invalid scheme, or is missing a domain.</li> </ul>"},{"location":"usage/odyn/#_validate_sessionsession","title":"<code>_validate_session(session)</code>","text":"<p>Validates that the session is a <code>requests.Session</code> object.</p>"},{"location":"usage/odyn/#parameters_5","title":"Parameters","text":"<ul> <li><code>session</code> (<code>requests.Session</code>) - The session object to validate.</li> </ul>"},{"location":"usage/odyn/#returns_4","title":"Returns","text":"<ul> <li><code>requests.Session</code> - The validated session object.</li> </ul>"},{"location":"usage/odyn/#raises_3","title":"Raises","text":"<ul> <li><code>InvalidSessionError</code> - If the provided object is not a <code>requests.Session</code>.</li> </ul>"},{"location":"usage/odyn/#_validate_loggerlogger","title":"<code>_validate_logger(logger)</code>","text":"<p>Validates the logger, returning the default logger if <code>None</code> is provided.</p>"},{"location":"usage/odyn/#parameters_6","title":"Parameters","text":"<ul> <li><code>logger</code> (<code>Logger | None</code>) - The logger object to validate.</li> </ul>"},{"location":"usage/odyn/#returns_5","title":"Returns","text":"<ul> <li><code>Logger</code> - A valid Logger instance.</li> </ul>"},{"location":"usage/odyn/#raises_4","title":"Raises","text":"<ul> <li><code>InvalidLoggerError</code> - If the provided object is not a loguru <code>Logger</code>.</li> </ul>"},{"location":"usage/odyn/#_validate_timeouttimeout","title":"<code>_validate_timeout(timeout)</code>","text":"<p>Validates that the timeout is a tuple of two positive numbers.</p>"},{"location":"usage/odyn/#parameters_7","title":"Parameters","text":"<ul> <li><code>timeout</code> (<code>TimeoutType</code>) - The timeout tuple to validate.</li> </ul>"},{"location":"usage/odyn/#returns_6","title":"Returns","text":"<ul> <li><code>TimeoutType</code> - The validated timeout tuple.</li> </ul>"},{"location":"usage/odyn/#raises_5","title":"Raises","text":"<ul> <li><code>InvalidTimeoutError</code> - If timeout is not a tuple of two positive numbers.</li> </ul>"},{"location":"usage/odyn/#attributes","title":"Attributes","text":""},{"location":"usage/odyn/#default_timeout","title":"<code>DEFAULT_TIMEOUT</code>","text":"<p>Class variable defining the default timeout configuration.</p> <pre><code>DEFAULT_TIMEOUT: ClassVar[TimeoutType] = (60, 60)  # (connect_timeout, read_timeout)\n</code></pre>"},{"location":"usage/odyn/#base_url_1","title":"<code>base_url</code>","text":"<p>The sanitized base URL of the OData service.</p> <pre><code>base_url: str  # Always ends with \"/\"\n</code></pre>"},{"location":"usage/odyn/#session_1","title":"<code>session</code>","text":"<p>The <code>requests.Session</code> object used for making HTTP requests.</p> <pre><code>session: requests.Session\n</code></pre>"},{"location":"usage/odyn/#timeout_1","title":"<code>timeout</code>","text":"<p>The timeout configuration for requests.</p> <pre><code>timeout: TimeoutType  # (connect_timeout, read_timeout)\n</code></pre>"},{"location":"usage/odyn/#logger_1","title":"<code>logger</code>","text":"<p>The logger instance used by the client.</p> <pre><code>logger: Logger\n</code></pre>"},{"location":"usage/odyn/#special-methods","title":"Special Methods","text":""},{"location":"usage/odyn/#__repr__","title":"<code>__repr__()</code>","text":"<p>Returns a string representation of the client.</p>"},{"location":"usage/odyn/#returns_7","title":"Returns","text":"<ul> <li><code>str</code> - A string representation of the Odyn client instance.</li> </ul>"},{"location":"usage/odyn/#example_1","title":"Example","text":"<pre><code>client = Odyn(base_url=\"https://api.example.com/\", session=session)\nprint(client)  # Output: Odyn(base_url='https://api.example.com/', timeout=(60, 60))\n</code></pre>"},{"location":"usage/odyn/#type-definitions","title":"Type Definitions","text":""},{"location":"usage/odyn/#timeouttype","title":"<code>TimeoutType</code>","text":"<pre><code>TimeoutType = tuple[int, int] | tuple[float, float]\n</code></pre> <p>A type alias for timeout configuration, representing <code>(connect_timeout, read_timeout)</code>.</p>"},{"location":"usage/odyn/#complete-example","title":"Complete Example","text":"<p>Here's a comprehensive example showing all major features:</p> <pre><code>from odyn import Odyn, BearerAuthSession\nfrom loguru import logger\n\ndef create_odyn_client():\n    \"\"\"Create and configure an Odyn client with custom settings.\"\"\"\n\n    # Create a custom logger\n    custom_logger = logger.bind(component=\"business-central-client\")\n\n    # Create an authenticated session\n    session = BearerAuthSession(\"your-access-token\")\n\n    # Initialize the client with custom configuration\n    client = Odyn(\n        base_url=\"https://your-tenant.businesscentral.dynamics.com/api/v2.0/\",\n        session=session,\n        logger=custom_logger,\n        timeout=(30, 120)  # 30s connect, 2min read timeout\n    )\n\n    return client\n\ndef fetch_business_data(client):\n    \"\"\"Fetch various types of business data with different query parameters.\"\"\"\n\n    # Fetch customers with filtering and sorting\n    customers = client.get(\n        \"customers\",\n        params={\n            \"$top\": 50,\n            \"$filter\": \"contains(name, 'Adventure')\",\n            \"$orderby\": \"name\",\n            \"$select\": \"id,name,phoneNumber,email\"\n        }\n    )\n\n    # Fetch items with pagination (handled automatically)\n    items = client.get(\n        \"items\",\n        params={\n            \"$filter\": \"blocked eq false\",\n            \"$orderby\": \"description\"\n        }\n    )\n\n    # Fetch vendors with custom headers\n    vendors = client.get(\n        \"vendors\",\n        headers={\n            \"Accept\": \"application/json;odata.metadata=minimal\",\n            \"Prefer\": \"odata.maxpagesize=100\"\n        }\n    )\n\n    return {\n        \"customers\": customers,\n        \"items\": items,\n        \"vendors\": vendors\n    }\n\n# Usage\nif __name__ == \"__main__\":\n    try:\n        client = create_odyn_client()\n        data = fetch_business_data(client)\n\n        print(f\"Retrieved {len(data['customers'])} customers\")\n        print(f\"Retrieved {len(data['items'])} items\")\n        print(f\"Retrieved {len(data['vendors'])} vendors\")\n\n    except Exception as e:\n        logger.error(f\"Error fetching data: {e}\")\n</code></pre>"},{"location":"usage/odyn/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Type Hints: Leverage the comprehensive type annotations for better IDE support and code safety.</p> </li> <li> <p>Handle Exceptions: Always wrap API calls in try-catch blocks to handle potential errors gracefully.</p> </li> <li> <p>Use Query Parameters: Utilize OData query parameters to filter and limit data on the server side.</p> </li> <li> <p>Customize Logging: Use custom loggers to integrate with your application's logging system.</p> </li> <li> <p>Set Appropriate Timeouts: Adjust timeout values based on your network conditions and data volume.</p> </li> <li> <p>Reuse Sessions: Create session objects once and reuse them for multiple requests to improve performance.</p> </li> </ol> <p>For more advanced configuration options, see Configuration and Logging.</p>"},{"location":"usage/sessions/","title":"Authentication and Session Management","text":"<p>This guide is the definitive source for understanding and configuring authentication, retries, and session handling in Odyn.</p>"},{"location":"usage/sessions/#the-role-of-the-session","title":"The Role of the Session","text":"<p>In Odyn, the <code>Odyn</code> client is responsible for building requests and handling responses, but it does not directly manage authentication or network resilience. That responsibility is delegated to a Session object.</p> <p>This design pattern offers significant flexibility: -   Separation of Concerns: Your authentication logic (e.g., refreshing a token) is kept separate from your API-calling logic (e.g., fetching customers). -   Configurability: You can fine-tune retry behavior for different network conditions without altering the client. -   Extensibility: You can provide your own custom authentication mechanism by creating a custom session class.</p> <p>Every <code>Odyn</code> client requires a session object during initialization. This object must be an instance of <code>requests.Session</code>. Odyn provides several powerful, pre-built session classes that you can use out of the box.</p>"},{"location":"usage/sessions/#the-odynsession-a-foundation-with-retries","title":"The <code>OdynSession</code>: A Foundation with Retries","text":"<p>The cornerstone of session management in Odyn is the <code>OdynSession</code> class. This class inherits from <code>requests.Session</code> but adds a powerful, automatic retry mechanism with exponential backoff.</p> <p>It serves as the base class for Odyn's other sessions and is the perfect foundation for your own custom sessions.</p>"},{"location":"usage/sessions/#configuring-retry-behavior","title":"Configuring Retry Behavior","text":"<p>You can customize the retry logic by passing parameters to any of Odyn's built-in session classes.</p> <pre><code>OdynSession(\n    retries: int = 5,\n    backoff_factor: float = 2.0,\n    status_forcelist: list[int] | None = None\n)\n</code></pre> <ul> <li><code>retries</code> (<code>int</code>): The total number of retry attempts for a failed request. Must be a positive integer.</li> <li><code>backoff_factor</code> (<code>float</code>): A multiplier used to calculate the delay between retries.</li> <li><code>status_forcelist</code> (<code>list[int]</code>): A list of HTTP status codes that will trigger a retry. By default, this is <code>[429, 500, 502, 503, 504]</code>.</li> </ul>"},{"location":"usage/sessions/#the-exponential-backoff-algorithm","title":"The Exponential Backoff Algorithm","text":"<p>The delay between retries is calculated using this formula, which prevents overwhelming an API that is temporarily struggling:</p> <p><code>delay = backoff_factor * (2 ** (retry_attempt - 1))</code></p> <p>Example: With the default <code>retries=5</code> and <code>backoff_factor=2.0</code>, the delays will be: -   Retry 1: <code>2.0 * (2 ** 0)</code> = 2 seconds -   Retry 2: <code>2.0 * (2 ** 1)</code> = 4 seconds -   Retry 3: <code>2.0 * (2 ** 2)</code> = 8 seconds -   Retry 4: <code>2.0 * (2 ** 3)</code> = 16 seconds -   Retry 5: <code>2.0 * (2 ** 4)</code> = 32 seconds</p>"},{"location":"usage/sessions/#built-in-session-implementations","title":"Built-in Session Implementations","text":"<p>Odyn provides two ready-to-use sessions for the most common Business Central authentication methods.</p>"},{"location":"usage/sessions/#bearerauthsession-recommended","title":"<code>BearerAuthSession</code> (Recommended)","text":"<p>This session handles modern token-based authentication. It extends <code>OdynSession</code> and automatically adds the <code>Authorization: Bearer &lt;your-token&gt;</code> header to every request.</p> <pre><code>from odyn import BearerAuthSession\n\n# Create a session with your access token\n# You can also customize the retry logic here\nsession = BearerAuthSession(\n    token=\"your-super-secret-access-token\",\n    retries=3,\n    backoff_factor=1.0\n)\n</code></pre>"},{"location":"usage/sessions/#basicauthsession","title":"<code>BasicAuthSession</code>","text":"<p>This session handles legacy username and password authentication. It extends <code>OdynSession</code> and uses the <code>auth</code> property of the underlying <code>requests.Session</code>.</p> <p>Security Warning: Basic Authentication is less secure than token-based methods. Only use it if your environment does not support modern authentication.</p> <pre><code>from odyn import BasicAuthSession\n\n# Create a session with your username and Web Service Access Key\nsession = BasicAuthSession(\n    username=\"your-username\",\n    password=\"your-web-service-access-key\",\n    retries=10 # Example: more aggressive retries\n)\n</code></pre>"},{"location":"usage/sessions/#creating-a-custom-session","title":"Creating a Custom Session","text":"<p>You have two primary methods for implementing custom session logic.</p>"},{"location":"usage/sessions/#method-1-extending-odynsession-recommended","title":"Method 1: Extending <code>OdynSession</code> (Recommended)","text":"<p>This is the best approach for most custom authentication scenarios because you inherit the robust, built-in retry mechanism.</p> <p>Follow this pattern to create a session that adds a custom header (e.g., <code>X-Api-Key</code>).</p>"},{"location":"usage/sessions/#step-1-create-a-new-session-class","title":"Step 1: Create a New Session Class","text":"<p>Inherit from <code>OdynSession</code>. In the <code>__init__</code> method, accept your secret and any <code>**kwargs</code>. The <code>**kwargs</code> are crucial for allowing users of your class to customize the retry settings.</p>"},{"location":"usage/sessions/#step-2-call-the-parent-constructor","title":"Step 2: Call the Parent Constructor","text":"<p>Call <code>super().__init__(**kwargs)</code> to ensure the retry logic is initialized correctly.</p>"},{"location":"usage/sessions/#step-3-implement-your-custom-logic","title":"Step 3: Implement Your Custom Logic","text":"<p>Modify the session as needed. In this case, we'll add a header.</p> <pre><code># custom_sessions.py\nfrom odyn import OdynSession, Odyn\n\n# Step 1: Inherit from OdynSession\nclass ApiKeyAuthSession(OdynSession):\n    \"\"\"\n    A custom session that authenticates using a static API key in a header.\n    It inherits the retry logic from OdynSession.\n    \"\"\"\n    def __init__(self, api_key: str, **kwargs):\n        # Step 2: Pass retry kwargs to the parent\n        super().__init__(**kwargs)\n\n        if not api_key or not isinstance(api_key, str):\n            raise ValueError(\"A valid API key (string) is required.\")\n\n        # Step 3: Add the custom authentication header\n        self.headers.update({\"X-Api-Key\": api_key})\n\n# How to use your custom session:\napi_key = \"your-secret-api-key\"\n\n# You can configure retries just like with the built-in sessions\nsession = ApiKeyAuthSession(api_key=api_key, retries=3, backoff_factor=0.5)\n\nclient = Odyn(\n    base_url=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant-id/production/\",\n    session=session\n)\n\nprint(\"Client created with custom API Key session.\")\n# All requests made with this client will now include the X-Api-Key header.\n</code></pre>"},{"location":"usage/sessions/#method-2-providing-your-own-requestssession-advanced","title":"Method 2: Providing Your Own <code>requests.Session</code> (Advanced)","text":"<p>The <code>Odyn</code> client will accept any object that is an instance of <code>requests.Session</code>. This provides maximum flexibility but comes with a major trade-off.</p> <p>Warning: If you provide a plain <code>requests.Session</code>, you will lose Odyn's built-in automatic retry logic. This approach is only recommended if you have a complex, existing session object (e.g., from a library like <code>requests-oauthlib</code>) that already has its own retry and token-refresh mechanisms.</p> <pre><code>import requests\nfrom odyn import Odyn\n\n# An existing, plain requests.Session object\n# Note: This session has NO retry logic.\ncustom_session = requests.Session()\ncustom_session.headers.update({\"X-Custom-Auth\": \"my-special-credentials\"})\n\n# The Odyn client will accept it\nclient = Odyn(\n    base_url=\"https://api.businesscentral.dynamics.com/v2.0/your-tenant-id/production/\",\n    session=custom_session\n)\n\nprint(\"Client created with a plain requests.Session.\")\n# This client will send the \"X-Custom-Auth\" header, but it will not\n# automatically retry on 500-series errors or 429s.\n</code></pre>"},{"location":"usage/sessions/#session-validation","title":"Session Validation","text":"<p>All session classes include comprehensive validation:</p>"},{"location":"usage/sessions/#retry-validation","title":"Retry Validation","text":"<pre><code># Valid retry values\nsession = OdynSession(retries=5)  # \u2705 Valid\n\n# Invalid retry values\nsession = OdynSession(retries=0)   # \u274c Raises InvalidRetryError\nsession = OdynSession(retries=-1)  # \u274c Raises InvalidRetryError\nsession = OdynSession(retries=3.5) # \u274c Raises InvalidRetryError\n</code></pre>"},{"location":"usage/sessions/#backoff-factor-validation","title":"Backoff Factor Validation","text":"<pre><code># Valid backoff factors\nsession = OdynSession(backoff_factor=2.0)  # \u2705 Valid\nsession = OdynSession(backoff_factor=1)    # \u2705 Valid (converted to float)\n\n# Invalid backoff factors\nsession = OdynSession(backoff_factor=0)    # \u274c Raises InvalidBackoffFactorError\nsession = OdynSession(backoff_factor=-1)   # \u274c Raises InvalidBackoffFactorError\n</code></pre>"},{"location":"usage/sessions/#status-forcelist-validation","title":"Status Forcelist Validation","text":"<pre><code># Valid status forcelist\nsession = OdynSession(status_forcelist=[429, 500, 503])  # \u2705 Valid\n\n# Invalid status forcelist\nsession = OdynSession(status_forcelist=[500, \"429\"])     # \u274c Raises InvalidStatusForcelistError\nsession = OdynSession(status_forcelist=\"500,429\")        # \u274c Raises InvalidStatusForcelistError\n</code></pre>"},{"location":"usage/sessions/#error-handling","title":"Error Handling","text":"<p>Sessions can raise the following exceptions:</p> <ul> <li><code>InvalidRetryError</code> - When retries parameter is invalid</li> <li><code>InvalidBackoffFactorError</code> - When backoff_factor parameter is invalid</li> <li><code>InvalidStatusForcelistError</code> - When status_forcelist parameter is invalid</li> </ul>"},{"location":"usage/sessions/#example-error-handling","title":"Example Error Handling","text":"<pre><code>from odyn import BearerAuthSession\nfrom odyn import InvalidRetryError, InvalidBackoffFactorError\n\ntry:\n    session = BearerAuthSession(\n        token=\"your-token\",\n        retries=5,\n        backoff_factor=2.0\n    )\nexcept (InvalidRetryError, InvalidBackoffFactorError) as e:\n    print(f\"Session configuration error: {e}\")\n    # Fall back to default settings\n    session = BearerAuthSession(\"your-token\")\n</code></pre>"},{"location":"usage/sessions/#best-practices","title":"Best Practices","text":""},{"location":"usage/sessions/#1-choose-the-right-authentication-method","title":"1. Choose the Right Authentication Method","text":"<ul> <li>Bearer Token (recommended) - More secure, supports token refresh</li> <li>Basic Auth - Simpler but less secure, credentials in headers</li> </ul>"},{"location":"usage/sessions/#2-configure-retry-settings-appropriately","title":"2. Configure Retry Settings Appropriately","text":"<pre><code># For stable networks\nsession = BearerAuthSession(\n    token=\"your-token\",\n    retries=3,\n    backoff_factor=2.0\n)\n\n# For unreliable networks\nsession = BearerAuthSession(\n    token=\"your-token\",\n    retries=10,\n    backoff_factor=0.5\n)\n</code></pre>"},{"location":"usage/sessions/#3-handle-token-expiration","title":"3. Handle Token Expiration","text":"<pre><code>from odyn import BearerAuthSession\nimport requests\n\ndef create_session_with_token_refresh():\n    \"\"\"Create session with token refresh logic.\"\"\"\n\n    def refresh_token():\n        # Implement your token refresh logic here\n        return \"new-access-token\"\n\n    session = BearerAuthSession(\"initial-token\")\n\n    # Add token refresh on 401 errors\n    def auth_handler(response, *args, **kwargs):\n        if response.status_code == 401:\n            new_token = refresh_token()\n            session.headers[\"Authorization\"] = f\"Bearer {new_token}\"\n            # Retry the request\n            return session.request(*args, **kwargs)\n        return response\n\n    session.hooks[\"response\"].append(auth_handler)\n    return session\n</code></pre>"},{"location":"usage/sessions/#4-reuse-sessions","title":"4. Reuse Sessions","text":"<pre><code># Create session once\nsession = BearerAuthSession(\"your-token\")\n\n# Reuse for multiple clients or requests\nclient1 = Odyn(base_url=\"https://api1.example.com/\", session=session)\nclient2 = Odyn(base_url=\"https://api2.example.com/\", session=session)\n</code></pre>"},{"location":"usage/sessions/#5-monitor-retry-behavior","title":"5. Monitor Retry Behavior","text":"<pre><code>from loguru import logger\n\n# Create a logger to monitor retry behavior\ncustom_logger = logger.bind(component=\"odyn-session\")\n\nsession = BearerAuthSession(\n    token=\"your-token\",\n    retries=5\n)\n\n# The session will log retry attempts automatically\nclient = Odyn(\n    base_url=\"https://your-tenant.businesscentral.dynamics.com/api/v2.0/\",\n    session=session,\n    logger=custom_logger\n)\n</code></pre>"},{"location":"usage/sessions/#related-documentation","title":"Related Documentation","text":"<ul> <li>Odyn Client API - Complete client reference</li> <li>Exception Handling - Understanding session-related errors</li> <li>Configuration - Advanced retry and timeout settings</li> <li>Logging - Monitoring session behavior</li> </ul>"}]}